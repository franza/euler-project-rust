// Even Fibonacci numbers
// Problem 2
//
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

struct FibonacciStream {
  previous: i32,
  pub value: i32
}

impl FibonacciStream {
  fn new() -> FibonacciStream {
    FibonacciStream { previous: 0, value: 1 }
  }
}

impl Iterator for FibonacciStream {
  type Item = i32;

  fn next(&mut self) -> Option<i32> {
    let current_value = self.value;
    self.value = current_value + self.previous;
    self.previous = current_value;
    Some(self.value)
  }
}

fn main() {
  let stream = FibonacciStream::new();
  let sum = stream.take_while(|&x| x < 4e6 as i32).filter(|&x| x % 2 == 0).fold(0, |acc, x| acc + x);
  println!("Result: {}", sum);
}
